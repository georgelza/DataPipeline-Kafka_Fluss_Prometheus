# if our project is called and network is called pipeline
#
# docker-compose -p pipeline up -d --build
# or
# export COMPOSE_PROJECT_NAME=pipeline
# docker-compose up -d --build
#
# inspect network: docker network inspect pipeline
#

    
configs:
  hive-site:
    file: ./conf/hive-site.xml
  flink-conf:
    file: ./conf/config.yaml
  log4j:
    file: ./conf/log4j.properties
  log4j-console:
    file: ./conf/log4j-console.properties
  log4j-session:
    file: ./conf/log4j-session.properties

  postgres_conf:
    file: ./conf/postgresql.conf
  postgres_hba:
    file: ./conf/pg_hba.conf

  prometheus_conf:
    file: ./conf/prometheus.yml

services:

  # begin Confluent Kafka cluster
  broker:
    image: confluentinc/cp-kafka:7.9.1
    container_name: broker
    hostname: broker
    ports:
      - 9092:9092
      - 9101:9101
    environment:
      KAFKA_NODE_ID: 1001
      KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:29193,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1001@broker:29193"
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid" 
      # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
      CLUSTER_ID: ${CLUSTER_ID}
    volumes:
      - ./data/confluent.d/broker/data:/var/lib/kafka/data
      - ./data/confluent.d/broker/log4j:/var/log/kafka
  

  schema-registry:
    image: confluentinc/cp-schema-registry:7.9.1
    container_name: schema-registry
    hostname: schema-registry
    depends_on:
      - broker
    ports:
      - 9081:9081
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:9081
      

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.9.1
    container_name: control-center
    hostname: control-center
    depends_on:
      - broker
    ports:
      - 9021:9021     # -> Web UI console
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_CONNECT_HEALTHCHECK_ENDPOINT: '/connectors'
      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:9081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  # end Clonfluent cluster


  # begin Fluss cluster
  #
  # NOTE: the volumes are knowingly over configured... I'm mapping ./data/fluss
  # cs/fluss to /tp/fluss and cd/paimon to /tmp/paimon so that I can observe
  # what is written there.
  coordinator-server:
    image: fluss/fluss:0.6.0
    container_name: coordinator-server
    hostname: coordinator-server
    # ports:
    #   - 9123:9123
    depends_on:
      - zookeeper
    environment:
      - |
        FLUSS_PROPERTIES=
          zookeeper.address: zookeeper:2181
          coordinator.host: coordinator-server  
          remote.data.dir: /tmp/fluss/remote-data
          datalake.format: paimon
          datalake.paimon.metastore: filesystem
          datalake.paimon.warehouse: /tmp/paimon
    volumes:
      - ./data/fluss/cs/fluss:/tmp/fluss
      - ./data/fluss/cs/paimon:/tmp/paimon
      - ./creFlinkFlows:/shell
    command: coordinatorServer

  # https://alibaba.github.io/fluss-docs/docs/maintenance/tiered-storage/remote-storage/
  # By default, Fluss will copy local log segments to remote storage in every 1 minute
  # 
  tablet-server-0:
    image: fluss/fluss:0.6.0
    hostname: tablet-server-0
    container_name: tablet-server-0
    depends_on:
      - coordinator-server
    environment:
      - |
        FLUSS_PROPERTIES=
          zookeeper.address: zookeeper:2181
          tablet-server.host: tablet-server-0
          tablet-server.id: 0
          tablet-server.port: 9124
          log.segment.file-size: 10MB
          data.dir: /tmp/fluss/data
          remote.data.dir: /tmp/fluss/remote-data 
          kv.snapshot.interval: 0s
          datalake.format: paimon
          datalake.paimon.metastore: filesystem
          datalake.paimon.warehouse: /tmp/paimon
    volumes:
      - ./data/fluss/ts0/fluss:/tmp/fluss
      - ./data/fluss/ts0/paimon:/tmp/paimon
    command: tabletServer

  tablet-server-1:
    image: fluss/fluss:0.6.0
    hostname: tablet-server-1
    container_name: tablet-server-1
    depends_on:
      - coordinator-server
    environment:
      - |
        FLUSS_PROPERTIES=
          zookeeper.address: zookeeper:2181
          tablet-server.host: tablet-server-1
          tablet-server.id: 1
          tablet-server.port: 9124
          log.segment.file-size: 10MB
          data.dir: /tmp/fluss/data
          remote.data.dir: /tmp/fluss/remote-data
          kv.snapshot.interval: 0s
          datalake.format: paimon
          datalake.paimon.metastore: filesystem
          datalake.paimon.warehouse: /tmp/paimon
    volumes:
      - ./data/fluss/ts1/fluss:/tmp/fluss
      - ./data/fluss/ts1/paimon:/tmp/paimon
    command: tabletServer

  tablet-server-2:
    image: fluss/fluss:0.6.0
    hostname: tablet-server-2
    container_name: tablet-server-2
    depends_on:
      - coordinator-server
    environment:
      - |
        FLUSS_PROPERTIES=
          zookeeper.address: zookeeper:2181
          tablet-server.host: tablet-server-2
          tablet-server.id: 2
          tablet-server.port: 9124
          log.segment.file-size: 10MB
          data.dir: /tmp/fluss/data
          remote.data.dir: /tmp/fluss/remote-data
          kv.snapshot.interval: 0s
          datalake.format: paimon
          datalake.paimon.metastore: filesystem
          datalake.paimon.warehouse: /tmp/paimon
    volumes:
      - ./data/fluss/ts2/fluss:/tmp/fluss
      - ./data/fluss/ts2/paimon:/tmp/paimon
    command: tabletServer

  zookeeper:
    restart: always
    image: zookeeper:3.9.2
  # end Fluss cluster



  # begin Flink cluster
  jobmanager:
    image: georgelza/apacheflink:1.20.1-scala_2.12-java17
    hostname: jobmanager
    container_name: jobmanager
    ports:
      - 8083:8081
    environment:
      - env.log.level=DEBUG

    volumes:
      - ./data/paimon:/tmp/paimon
      - ./creFlinkFlows:/sql

      - ./data/flink/logs:/opt/flink/log
      - ./data/flink/checkpoints:/opt/flink/checkpoints
      - ./data/flink/rocksdb:/opt/flink/rocksdb
      - ./data/flink/jm/tmp:/tmp

      - ./conf/flink/lib/hive:/opt/flink/lib/hive
      - ./conf/flink/lib/fluss:/opt/flink/lib/fluss
      - ./conf/flink/lib/flink:/opt/flink/lib/flink
    configs:
      - source: flink-conf
        target: /opt/flink/conf/config.yaml
      - source: hive-site
        target: /opt/flink/conf/hive-site.xml
      - source: hive-site
        target: /opt/sql-client/conf/hive-site.xml
      - source: log4j
        target: /opt/flink/conf/log4j.properties
      - source: log4j-console
        target: /opt/flink/conf/log4j-console.properties
      - source: log4j-session
        target: /opt/flink/conf/log4j-session.properties
    command: jobmanager

  taskmanager:
    image: georgelza/apacheflink:1.20.1-scala_2.12-java17
    depends_on:
      - jobmanager
    deploy:
      replicas: 2
    environment:
      - env.log.level=DEBUG

    volumes:
      - ./data/paimon:/tmp/paimon

      - ./data/flink/logs:/opt/flink/log
      - ./data/flink/checkpoints:/opt/flink/checkpoints
      - ./data/flink/rocksdb:/opt/flink/rocksdb
      - ./data/flink/tm/tmp:/tmp

      - ./conf/flink/lib/hive:/opt/flink/lib/hive
      - ./conf/flink/lib/fluss:/opt/flink/lib/fluss
      - ./conf/flink/lib/flink:/opt/flink/lib/flink
    configs:
      - source: flink-conf
        target: /opt/flink/conf/config.yaml
      - source: hive-site
        target: /opt/flink/conf/hive-site.xml
      - source: hive-site
        target: /opt/sql-client/conf/hive-site.xml
      - source: log4j
        target: /opt/flink/conf/log4j.properties
      - source: log4j-console
        target: /opt/flink/conf/log4j-console.properties
      - source: log4j-session
        target: /opt/flink/conf/log4j-session.properties
    command: taskmanager
  # end Flink cluster


  # Datastore for Hive Metastore 
  postgres:
    image: ${REPO_NAME}/postgres:12.0
    hostname: postgres
    container_name: postgres
    restart: unless-stopped
    ports:
      - ${DATABASE_PORT}:5432
    environment:
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DB=${DATABASE_DB}
    healthcheck:
      test: ["CMD", "psql", "-U", "${DATABASE_USER}", "${DATABASE_DB}"]
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    configs:
      - source: postgres_conf
        target: /etc/postgresql/postgresql.conf
      - source: postgres_hba
        target: /etc/postgresql/data/pg_hba.conf
    command: -c config_file=/etc/postgresql/postgresql.conf


  # Hive Metastore 3.1.3
  # HADOOP_VERSION=3.3.5
  # POSTGRES_CONNECTOR_VERSION=42.7.3
  #
  # Launch Standalone Metastore With External RDBMS (Postgres)
  # If you want to use your own core-site.xml/hdfs-site.xml/yarn-site.xml or hive-site.xml for the service, 
  # you can provide the environment variable HIVE_CUSTOM_CONF_DIR for the command. For example:
  # Put the custom configuration file under the directory /opt/hive/conf and run:
  metastore:
    image: ${REPO_NAME}/hive-metastore-3.1.3-java8:1.0.0
    hostname: metastore
    container_name: metastore
    restart: unless-stopped
    environment:
      SERVICE_NAME: metastore
      DB_DRIVER: ${DATABASE_TYPE_JDBC}
      IS_RESUME: "true"
      SERVICE_OPTS: '-Xmx512m 
                    -Djavax.jdo.option.ConnectionDriverName=org.postgresql.Driver
                    -Djavax.jdo.option.ConnectionURL=jdbc:${DATABASE_TYPE_JDBC}://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_DB}?sslmode=disable
                    -Djavax.jdo.option.ConnectionUserName=${DATABASE_USER}
                    -Djavax.jdo.option.ConnectionPassword=${DATABASE_PASSWORD}'
    env_file:
      - ./conf/hive.env
    ports:
      - 9083:9083   # Hive Metastore access port
    depends_on:
      - postgres
#      - mc
    command: hivemetastore


  # Using HS2 with Standalone/Remote Metastore
  # "-Dhive.metastore.uris is used to specify the external Metastore
  # NOTE: To save the data between container restarts, you can start the HiveServer2 with mounted volume:
  hiveserver2:
    image: ${REPO_NAME}/hive-hiveserver2-3.1.3-java8:1.0.0
    hostname: hiveserver2
    container_name: hiveserver2
    restart: unless-stopped
    environment:
      - SERVICE_NAME=hiveserver2
      - IS_RESUME="true"
      - SERVICE_OPTS='-Xmx512m 
                    -Dhive.metastore.uris=thrift://metastore:9083'
    env_file:
      - ./conf/hive.env
    ports:
      - 10000:10000   # Hive server2 port
      - 10001:10001
      - 10002:10002   # HiveServer2 Web UI
    depends_on:
      - metastore
    command: hiveserver


  # https://mxulises.medium.com/simple-prometheus-setup-on-docker-compose-f702d5f98579
  # 
  # Configure Remote write Reciever
  # https://ambar-thecloudgarage.medium.com/remote-writes-with-kube-prometheus-3b4ad038d675
  # https://faun.pub/how-to-configure-prometheus-server-as-a-remote-write-receiver-4c8e265011c2
  # https://www.google.com/search?client=safari&rls=en&q=docker+compose+prometheus+web.enable-remote-write-receiver&ie=UTF-8&oe=UTF-8
  prometheus:
    image: prom/prometheus:v3.3.0
    hostname: prometheus
    container_name: prometheus
    environment:
      - TZ=Africa/Johannesburg
    volumes:
      - ./data/prometheus:/data
    configs:
      - source: prometheus_conf
        target: /etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--web.enable-remote-write-receiver"
      - "--storage.tsdb.path=/data"

  grafana:
    image: grafana/grafana:11.6.1
    hostname: grafana
    container_name: grafana
    restart: unless-stopped
    volumes:
      - ./data/grafana:/var/lib/grafana
      - ./data/grafana/provisioning/:/etc/grafana/provisioning/
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=adminadmin
    ports:
      - 3000:3000
    depends_on:
      - prometheus


# IOT Payload generator -> Dockerrized
#
# in the Volumes, you can point all the configs to the single app_iot1/conf and commond share it or you can 
# place a site specific config file into each folder and then configure each of the data gens to use it's own specific
# configuration file
# The "security" related paramters are contained in the .env file
  iot1:
    image: georgelza/iot_datagen:3.3
    hostname: iot1
    container_name: iot1
    environment:
      CONSOLE_DEBUGLEVEL: 0
      FILE_DEBUGLEVEL: 0
      ECHOSEEDFILE: 0
      SEEDFILE: conf/Full.json
      SITEIDS: 101,104
      LOGDIR: logs
      FILEROOT: factory_iot
      LOGGINGFILE: logger_north
      TSHUMAN: 0
      STRUCTMOD: 0
      DEVICETYPE: 0
      KAFKA_TOPIC_NAME: factory_iot_north
      KAFKA_MODE: 1
      KAFKA_BATCH_SIZE: 1000
    volumes:
      - ../app_iot1/conf/:/app/conf
      - ../app_iot1/logs/:/app/logs

  iot2:
    image: georgelza/iot_datagen:3.3
    hostname: iot2
    container_name: iot2
    environment:
      CONSOLE_DEBUGLEVEL: 0
      FILE_DEBUGLEVEL: 0
      ECHOSEEDFILE: 0
      SEEDFILE: conf/Full.json
      SITEIDS: 102,105
      LOGDIR: logs
      FILEROOT: factory_iot
      LOGGINGFILE: logger_south
      TSHUMAN: 1
      STRUCTMOD: 1
      DEVICETYPE: 0
      KAFKA_TOPIC_NAME: factory_iot_south
      KAFKA_MODE: 1
      KAFKA_BATCH_SIZE: 1000
    volumes:
      - ../app_iot2/conf/:/app/conf
      - ../app_iot2/logs/:/app/logs

  iot3:
    image: georgelza/iot_datagen:3.3
    hostname: iot3
    container_name: iot3
    environment:
      CONSOLE_DEBUGLEVEL: 0
      FILE_DEBUGLEVEL: 0
      ECHOSEEDFILE: 0
      SEEDFILE: conf/Full.json
      SITEIDS: 103,106
      LOGDIR: logs
      FILEROOT: factory_iot
      LOGGINGFILE: logger_east
      TSHUMAN: 1
      STRUCTMOD: 1
      DEVICETYPE: 1
      KAFKA_TOPIC_NAME: factory_iot_east
      KAFKA_MODE: 1
      KAFKA_BATCH_SIZE: 1000
    volumes:
      - ../app_iot3/conf/:/app/conf
      - ../app_iot3/logs/:/app/logs


# Without a network explicitly defined, you hit this Hive/Thrift error
# java.net.URISyntaxException Illegal character in hostname
# https://github.com/TrivadisPF/platys-modern-data-platform/issues/231
networks:
  default:
    name: ${COMPOSE_PROJECT_NAME}
